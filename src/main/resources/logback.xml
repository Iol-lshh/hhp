<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 콘솔 로그 패턴: 색상 적용 %clr(pattern){color} -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <property name="CONSOLE_LOG_PATTERN"
              value="[%d{yyyyMMdd'T'HHmmss}] %clr(%-5level) %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n" />
    <!-- 외, 패턴 설정 -->
    <property name="FILE_LOG_PATTERN"
              value="[%d{yyyyMMdd'T'HHmmss}] %-5level [%thread] %-40.40logger{16} : %msg%n" />

    <!-- appender: 로깅 이벤트 처리 - 0개 이상 -->
    <!-- console standard out -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>
    <!-- aws appender -->
    <appender name="ASYNC_AWS_LOGS" class="ca.pjer.logback.AwsLogsAppender">
        <!-- logback 클래식의 필터-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <if condition='property("spring.profiles.active").contains("local")'>
            <then>
                <!-- local 용 로그 그룹명 -->
                <logGroupName>${Log_Group_Name:aws}</logGroupName>
            </then>
        </if>
        <if condition='property("spring.profiles.active").contains("dev")'>
            <then>
                <!-- dev 용 로그 그룹명 -->
                <logGroupName>${Log_Group_Name:dev}</logGroupName>
            </then>
        </if>
        <if condition='property("spring.profiles.active").contains("prod")'>
            <then>
                <!-- prod 용 로그 그룹명 -->
                <logGroupName>${Log_Group_Name:prod}</logGroupName>
            </then>
        </if>
        <logStreamUuidPrefix>error-</logStreamUuidPrefix>
        <logRegion>ap-northeast-2</logRegion>
        <maxBatchLogEvents>50</maxBatchLogEvents>
        <maxFlushTimeMillis>30000</maxFlushTimeMillis>
        <maxBlockTimeMillis>5000</maxBlockTimeMillis>
        <retentionTimeDays>0</retentionTimeDays>
    </appender>

    <springProfile name="local,local2,aws">
        <logger name="org.springframework" level="INFO">
            <appender-ref ref="STDOUT" />
        </logger>
        <logger name="org.hibernate.SQL" level="DEBUG" />
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />
        <!--root: 최상단 logger - 최대 1개-->
<!--        <root level="INFO">-->
<!--            <appender-ref ref="STDOUT"/>-->
<!--        </root>-->
    </springProfile>
    <springProfile name="test">
        <root level="DEBUG">
            <appender-ref ref="STDOUT" />
        </root>
    </springProfile>
    <springProfile name="aws">
        <!--logger: 로깅을 남기는 곳 - 0개 이상-->
        <logger name="org.springframework" level="INFO" >
            <appender-ref ref="ASYNC_AWS_LOGS" />
        </logger>

    </springProfile>
</configuration>